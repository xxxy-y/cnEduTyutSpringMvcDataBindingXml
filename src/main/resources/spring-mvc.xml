<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
    <!--    开启配置文件形式的自动扫描，Spring会自动扫描cn.edu.tyut.cnedutyutspringmvc包及其子包下的Java类，如果带有@Service、@Controller、@Response等注解，则把这些类注册为Bean并存放进IOC容器中-->
    <context:component-scan base-package="cn.edu.tyut.controller"/>
    <context:component-scan base-package="cn.edu.tyut.handler"/>
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--        最终视图的地址为: 视图页面的前缀 + 逻辑视图名 + 视图页面的后缀-->
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--    配置类型转换器工厂-->
    <!--    <bean id="converterService" class="org.springframework.context.support.ConversionServiceFactoryBean">-->
    <!--        给工厂注入一个新的类型转换器-->
    <!--        <property name="converters">-->
    <!--            可以注入多个类型转换器-->
    <!--            <array>-->
    <!--                配置自定义类型转换器-->
    <!--                <bean class="cn.edu.tyut.convert.DataConvert"/>-->
    <!--            </array>-->
    <!--        </property>-->
    <!--    </bean>-->
    <!--    装载类型转换器-->
    <!--    <mvc:annotation-driven conversion-service="converterService"/>-->
    <!--    注解方式的类型转换依赖注解驱动的支持，配置文件中必须显式定义<mvc:annotation-driven/>-->
    <mvc:annotation-driven/>
<!--    配置静态资源访问路径-->
<!--    <mvc:resources mapping="/WEB-INF/js/**" location="/WEB-INF/js/"/>-->
<!--    也可以配置静态资源访问路径，它是只要请求到静态资源都会放行-->
    <mvc:default-servlet-handler/>
    <!--使用<bean>元素配置JSON转换器,需要同时配置处理器映射器和处理器适配器,并且JSON转换器应配置在适配器中-->
<!--    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>-->
<!--    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">-->
<!--        <property name="messageConverters">-->
<!--            <list>-->
<!--                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

<!--    注入SimpleMappingExceptionResolver-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 定义需要特殊处理的异常，用类名或者完全路径名作为key，对应的异常页面名作为值，将不同的异常映射到不同的页面 -->
        <property name="exceptionMappings">
            <props>
                <!-- 使用完全路径名作为key -->
                <prop key="java.lang.NullPointerException">
                    nullPointerException
                </prop>
                <!-- 使用类名作为key -->
                <prop key="IOException">
                    IOException
                </prop>
            </props>
        </property>
        <!-- 为所有的异常定义默认的异常处理页面，value作为默认的异常处理页面 -->
        <property name="defaultErrorView" value="defaultException"/>
        <!-- 定义在异常处理页面中获取异常信息的变量名，默认名为exception，这里我定义为exceptionValue -->
        <property name="exceptionAttribute" value="exceptionValue"/>
    </bean>

<!--    配置拦截器-->
    <mvc:interceptors>
        <!-- CustomInterceptor01拦截器会拦截所有请求 -->
        <!-- 多个拦截器会按照拦截器的配置顺序来执行 -->
        <bean class="cn.edu.tyut.interceptor.CustomInterceptor01"/>
        <!-- CustomInterceptor02拦截器只会拦截指定路径的请求 -->
        <!-- 子元素必须按照以下代码的配置顺序进行编写-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:mapping path="/home"/>
            <mvc:exclude-mapping path="/home/index"/>
            <bean class="cn.edu.tyut.interceptor.CustomInterceptor02"/>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>